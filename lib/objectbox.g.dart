// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/Fare Manager/data/models/cycle.dart';
import 'features/Fare Manager/data/models/dof3a.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5972268688249687098),
    name: 'Cycle',
    lastPropertyId: const obx_int.IdUid(3, 3024745071571269864),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1765198063809127862),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1047361330346995904),
        name: 'date',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3024745071571269864),
        name: 'transportType',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'dof3at',
        srcEntity: 'Dof3a',
        srcField: 'cycle',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8786665231166681775),
    name: 'Dof3a',
    lastPropertyId: const obx_int.IdUid(8, 6344377654128824031),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6567290579445395696),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3290197052227283569),
        name: 'passengerNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3457771198223777360),
        name: 'fare',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5557537611321270025),
        name: 'fareperSeat',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6485680789740533043),
        name: 'paidFor',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6121125823498555137),
        name: 'paid',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7038055285514195913),
        name: 'remaining',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6344377654128824031),
        name: 'cycleId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3296611155886863250),
        relationTarget: 'Cycle',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 8786665231166681775),
    lastIndexId: const obx_int.IdUid(1, 3296611155886863250),
    lastRelationId: const obx_int.IdUid(1, 8962334759101355196),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [8962334759101355196],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Cycle: obx_int.EntityDefinition<Cycle>(
      model: _entities[0],
      toOneRelations: (Cycle object) => [],
      toManyRelations:
          (Cycle object) => {
            obx_int.RelInfo<Dof3a>.toOneBacklink(
                  8,
                  object.id,
                  (Dof3a srcObject) => srcObject.cycle,
                ):
                object.dof3at,
          },
      getId: (Cycle object) => object.id,
      setId: (Cycle object, int id) {
        object.id = id;
      },
      objectToFB: (Cycle object, fb.Builder fbb) {
        final dateOffset = fbb.writeString(object.date);
        final transportTypeOffset = fbb.writeString(object.transportType);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, dateOffset);
        fbb.addOffset(2, transportTypeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final transportTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Cycle(
          id: idParam,
          date: dateParam,
          transportType: transportTypeParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Cycle>(
          object.dof3at,
          store,
          obx_int.RelInfo<Dof3a>.toOneBacklink(
            8,
            object.id,
            (Dof3a srcObject) => srcObject.cycle,
          ),
        );
        return object;
      },
    ),
    Dof3a: obx_int.EntityDefinition<Dof3a>(
      model: _entities[1],
      toOneRelations: (Dof3a object) => [object.cycle],
      toManyRelations: (Dof3a object) => {},
      getId: (Dof3a object) => object.id,
      setId: (Dof3a object, int id) {
        object.id = id;
      },
      objectToFB: (Dof3a object, fb.Builder fbb) {
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.passengerNumber);
        fbb.addFloat64(2, object.fare);
        fbb.addFloat64(3, object.fareperSeat);
        fbb.addInt64(4, object.paidFor);
        fbb.addFloat64(5, object.paid);
        fbb.addFloat64(6, object.remaining);
        fbb.addInt64(7, object.cycle.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final passengerNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final fareParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final fareperSeatParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final paidForParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final paidParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final remainingParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final object = Dof3a(
          passengerNumber: passengerNumberParam,
          fare: fareParam,
          fareperSeat: fareperSeatParam,
          paidFor: paidForParam,
          paid: paidParam,
          remaining: remainingParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.cycle.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.cycle.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Cycle] entity fields to define ObjectBox queries.
class Cycle_ {
  /// See [Cycle.id].
  static final id = obx.QueryIntegerProperty<Cycle>(_entities[0].properties[0]);

  /// See [Cycle.date].
  static final date = obx.QueryStringProperty<Cycle>(
    _entities[0].properties[1],
  );

  /// See [Cycle.transportType].
  static final transportType = obx.QueryStringProperty<Cycle>(
    _entities[0].properties[2],
  );

  /// see [Cycle.dof3at]
  static final dof3at = obx.QueryBacklinkToMany<Dof3a, Cycle>(Dof3a_.cycle);
}

/// [Dof3a] entity fields to define ObjectBox queries.
class Dof3a_ {
  /// See [Dof3a.id].
  static final id = obx.QueryIntegerProperty<Dof3a>(_entities[1].properties[0]);

  /// See [Dof3a.passengerNumber].
  static final passengerNumber = obx.QueryIntegerProperty<Dof3a>(
    _entities[1].properties[1],
  );

  /// See [Dof3a.fare].
  static final fare = obx.QueryDoubleProperty<Dof3a>(
    _entities[1].properties[2],
  );

  /// See [Dof3a.fareperSeat].
  static final fareperSeat = obx.QueryDoubleProperty<Dof3a>(
    _entities[1].properties[3],
  );

  /// See [Dof3a.paidFor].
  static final paidFor = obx.QueryIntegerProperty<Dof3a>(
    _entities[1].properties[4],
  );

  /// See [Dof3a.paid].
  static final paid = obx.QueryDoubleProperty<Dof3a>(
    _entities[1].properties[5],
  );

  /// See [Dof3a.remaining].
  static final remaining = obx.QueryDoubleProperty<Dof3a>(
    _entities[1].properties[6],
  );

  /// See [Dof3a.cycle].
  static final cycle = obx.QueryRelationToOne<Dof3a, Cycle>(
    _entities[1].properties[7],
  );
}
